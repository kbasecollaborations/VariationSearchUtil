"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-int"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _abortablePromiseCache = _interopRequireDefault(require("abortable-promise-cache"));

var _quickLru = _interopRequireDefault(require("quick-lru"));

var _genericFilehandle = require("generic-filehandle");

var _bgzfFilehandle = require("@gmod/bgzf-filehandle");

var _util = require("./util");

var _tbi = _interopRequireDefault(require("./tbi"));

var _csi = _interopRequireDefault(require("./csi"));

function timeout(time) {
  return new _promise.default(function (resolve) {
    setTimeout(resolve, time);
  });
}

var TabixIndexedFile = /*#__PURE__*/function () {
  /**
   * @param {object} args
   * @param {string} [args.path]
   * @param {filehandle} [args.filehandle]
   * @param {string} [args.tbiPath]
   * @param {filehandle} [args.tbiFilehandle]
   * @param {string} [args.csiPath]
   * @param {filehandle} [args.csiFilehandle]
   * @param {number} [args.chunkSizeLimit] maximum number of bytes to fetch in a single `getLines` call.
   * default 2MiB
   * @param {number} [args.yieldLimit] maximum number of lines to parse without yielding.
   * this avoids having a large read prevent any other work getting done on the thread.  default 300 lines.
   * @param {function} [args.renameRefSeqs] optional function with sig `string => string` to transform
   * reference sequence names for the purpose of indexing and querying. note that the data that is returned is
   * not altered, just the names of the reference sequences that are used for querying.
   * @param {number} [args.chunkCacheSize] maximum size in bytes of the chunk cache. default 5MB
   * @param {number} [args.blockCacheSize] maximum size in bytes of the block cache. default 5MB
   */
  function TabixIndexedFile(_ref) {
    var path = _ref.path,
        filehandle = _ref.filehandle,
        tbiPath = _ref.tbiPath,
        tbiFilehandle = _ref.tbiFilehandle,
        csiPath = _ref.csiPath,
        csiFilehandle = _ref.csiFilehandle,
        _ref$chunkSizeLimit = _ref.chunkSizeLimit,
        chunkSizeLimit = _ref$chunkSizeLimit === void 0 ? 2000000 : _ref$chunkSizeLimit,
        _ref$yieldLimit = _ref.yieldLimit,
        yieldLimit = _ref$yieldLimit === void 0 ? 300 : _ref$yieldLimit,
        _ref$renameRefSeqs = _ref.renameRefSeqs,
        renameRefSeqs = _ref$renameRefSeqs === void 0 ? function (n) {
      return n;
    } : _ref$renameRefSeqs,
        _ref$chunkCacheSize = _ref.chunkCacheSize,
        chunkCacheSize = _ref$chunkCacheSize === void 0 ? 5 * Math.pow(2, 20) : _ref$chunkCacheSize;
    (0, _classCallCheck2.default)(this, TabixIndexedFile);
    (0, _defineProperty2.default)(this, "filehandle", void 0);
    (0, _defineProperty2.default)(this, "index", void 0);
    (0, _defineProperty2.default)(this, "chunkSizeLimit", void 0);
    (0, _defineProperty2.default)(this, "renameRefSeq", void 0);
    (0, _defineProperty2.default)(this, "yieldLimit", void 0);
    (0, _defineProperty2.default)(this, "chunkCache", void 0);
    if (filehandle) this.filehandle = filehandle;else if (path) this.filehandle = new _genericFilehandle.LocalFile(path);else throw new TypeError('must provide either filehandle or path');
    if (tbiFilehandle) this.index = new _tbi.default({
      filehandle: tbiFilehandle,
      renameRefSeqs: renameRefSeqs
    });else if (csiFilehandle) this.index = new _csi.default({
      filehandle: csiFilehandle,
      renameRefSeqs: renameRefSeqs
    });else if (tbiPath) this.index = new _tbi.default({
      filehandle: new _genericFilehandle.LocalFile(tbiPath),
      renameRefSeqs: renameRefSeqs
    });else if (csiPath) this.index = new _csi.default({
      filehandle: new _genericFilehandle.LocalFile(csiPath),
      renameRefSeqs: renameRefSeqs
    });else if (path) {
      this.index = new _tbi.default({
        filehandle: new _genericFilehandle.LocalFile("".concat(path, ".tbi")),
        renameRefSeqs: renameRefSeqs
      });
    } else {
      throw new TypeError('must provide one of tbiFilehandle, tbiPath, csiFilehandle, or csiPath');
    }
    this.chunkSizeLimit = chunkSizeLimit;
    this.yieldLimit = yieldLimit;
    this.renameRefSeq = renameRefSeqs;
    this.chunkCache = new _abortablePromiseCache.default({
      cache: new _quickLru.default({
        maxSize: Math.floor(chunkCacheSize / (1 << 16))
      }),
      fill: this.readChunk.bind(this)
    });
  }
  /**
   * @param {string} refName name of the reference sequence
   * @param {number} start start of the region (in 0-based half-open coordinates)
   * @param {number} end end of the region (in 0-based half-open coordinates)
   * @param {function|object} lineCallback callback called for each line in the region. can also pass a object param containing obj.lineCallback, obj.signal, etc
   * @returns {Promise} resolved when the whole read is finished, rejected on error
   */


  (0, _createClass2.default)(TabixIndexedFile, [{
    key: "getLines",
    value: function () {
      var _getLines = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(refName, start, end, opts) {
        var signal, options, callback, metadata, chunks, i, size, linesSinceLastYield, chunkNum, previousStartCoordinate, c, _yield$this$chunkCach, buffer, cpositions, dpositions, lines, blockStart, pos, _i, line, _this$checkLine, startCoordinate, overlaps;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = {};

                if (!(typeof opts === 'undefined')) {
                  _context.next = 3;
                  break;
                }

                throw new TypeError('line callback must be provided');

              case 3:
                if (typeof opts === 'function') callback = opts;else {
                  options = opts;
                  callback = opts.lineCallback;
                }

                if (!(refName === undefined)) {
                  _context.next = 6;
                  break;
                }

                throw new TypeError('must provide a reference sequence name');

              case 6:
                if (callback) {
                  _context.next = 8;
                  break;
                }

                throw new TypeError('line callback must be provided');

              case 8:
                _context.next = 10;
                return this.index.getMetadata(options);

              case 10:
                metadata = _context.sent;
                (0, _util.checkAbortSignal)(signal);

                if (!start) {
                  start = 0;
                }

                if (!end) {
                  end = metadata.maxRefLength;
                }

                if (start <= end) {
                  _context.next = 16;
                  break;
                }

                throw new TypeError('invalid start and end coordinates. start must be less than or equal to end');

              case 16:
                if (!(start === end)) {
                  _context.next = 18;
                  break;
                }

                return _context.abrupt("return");

              case 18:
                _context.next = 20;
                return this.index.blocksForRange(refName, start, end, options);

              case 20:
                chunks = _context.sent;
                (0, _util.checkAbortSignal)(signal); // check the chunks for any that are over the size limit.  if
                // any are, don't fetch any of them

                i = 0;

              case 23:
                if (!(i < chunks.length)) {
                  _context.next = 30;
                  break;
                }

                size = chunks[i].fetchedSize();

                if (!(size > this.chunkSizeLimit)) {
                  _context.next = 27;
                  break;
                }

                throw new Error("Too much data. Chunk size ".concat(size.toLocaleString(), " bytes exceeds chunkSizeLimit of ").concat(this.chunkSizeLimit.toLocaleString(), "."));

              case 27:
                i += 1;
                _context.next = 23;
                break;

              case 30:
                // now go through each chunk and parse and filter the lines out of it
                linesSinceLastYield = 0;
                chunkNum = 0;

              case 32:
                if (!(chunkNum < chunks.length)) {
                  _context.next = 73;
                  break;
                }

                previousStartCoordinate = void 0;
                c = chunks[chunkNum];
                _context.next = 37;
                return this.chunkCache.get(c.toString(), c, signal);

              case 37:
                _yield$this$chunkCach = _context.sent;
                buffer = _yield$this$chunkCach.buffer;
                cpositions = _yield$this$chunkCach.cpositions;
                dpositions = _yield$this$chunkCach.dpositions;
                lines = buffer.toString().split('\n');
                lines.pop();
                (0, _util.checkAbortSignal)(signal);
                blockStart = c.minv.dataPosition;
                pos = void 0;
                _i = 0;

              case 47:
                if (!(_i < lines.length)) {
                  _context.next = 70;
                  break;
                }

                line = lines[_i];

                for (pos = 0; blockStart >= dpositions[pos]; pos += 1) {
                  ;
                } // filter the line for whether it is within the requested range


                _this$checkLine = this.checkLine(metadata, refName, start, end, line), startCoordinate = _this$checkLine.startCoordinate, overlaps = _this$checkLine.overlaps; // do a small check just to make sure that the lines are really sorted by start coordinate

                if (!(previousStartCoordinate !== undefined && startCoordinate !== undefined && previousStartCoordinate > startCoordinate)) {
                  _context.next = 53;
                  break;
                }

                throw new Error("Lines not sorted by start coordinate (".concat(previousStartCoordinate, " > ").concat(startCoordinate, "), this file is not usable with Tabix."));

              case 53:
                previousStartCoordinate = startCoordinate;

                if (!overlaps) {
                  _context.next = 58;
                  break;
                }

                callback(line.trim(), // cpositions[pos] refers to actual file offset of a bgzip block boundaries
                //
                // we multiply by (1 <<8) in order to make sure each block has a "unique"
                // address space so that data in that block could never overlap
                //
                // then the blockStart-dpositions is an uncompressed file offset from
                // that bgzip block boundary, and since the cpositions are multiplied by
                // (1 << 8) these uncompressed offsets get a unique space
                cpositions[pos] * (1 << 8) + (blockStart - dpositions[pos]));
                _context.next = 60;
                break;

              case 58:
                if (!(startCoordinate !== undefined && startCoordinate >= end)) {
                  _context.next = 60;
                  break;
                }

                return _context.abrupt("return");

              case 60:
                blockStart += line.length + 1; // yield if we have emitted beyond the yield limit

                linesSinceLastYield += 1;

                if (!(linesSinceLastYield >= this.yieldLimit)) {
                  _context.next = 67;
                  break;
                }

                _context.next = 65;
                return timeout(1);

              case 65:
                (0, _util.checkAbortSignal)(signal);
                linesSinceLastYield = 0;

              case 67:
                _i += 1;
                _context.next = 47;
                break;

              case 70:
                chunkNum += 1;
                _context.next = 32;
                break;

              case 73:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getLines(_x, _x2, _x3, _x4) {
        return _getLines.apply(this, arguments);
      }

      return getLines;
    }()
  }, {
    key: "getMetadata",
    value: function () {
      var _getMetadata = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var opts,
            _args2 = arguments;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opts = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                return _context2.abrupt("return", this.index.getMetadata(opts));

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getMetadata() {
        return _getMetadata.apply(this, arguments);
      }

      return getMetadata;
    }()
    /**
     * get a buffer containing the "header" region of
     * the file, which are the bytes up to the first
     * non-meta line
     *
     * @returns {Promise} for a buffer
     */

  }, {
    key: "getHeaderBuffer",
    value: function () {
      var _getHeaderBuffer = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        var opts,
            _yield$this$getMetada,
            firstDataLine,
            metaChar,
            maxBlockSize,
            maxFetch,
            bytes,
            lastNewline,
            newlineByte,
            metaByte,
            i,
            _args3 = arguments;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                opts = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
                _context3.next = 3;
                return this.getMetadata(opts);

              case 3:
                _yield$this$getMetada = _context3.sent;
                firstDataLine = _yield$this$getMetada.firstDataLine;
                metaChar = _yield$this$getMetada.metaChar;
                maxBlockSize = _yield$this$getMetada.maxBlockSize;
                (0, _util.checkAbortSignal)(opts.signal);
                maxFetch = firstDataLine && firstDataLine.blockPosition ? firstDataLine.blockPosition + maxBlockSize : maxBlockSize; // TODO: what if we don't have a firstDataLine, and the header
                // actually takes up more than one block? this case is not covered here

                _context3.next = 11;
                return this._readRegion(0, maxFetch, opts);

              case 11:
                bytes = _context3.sent;
                (0, _util.checkAbortSignal)(opts.signal);
                _context3.prev = 13;
                _context3.next = 16;
                return (0, _bgzfFilehandle.unzip)(bytes);

              case 16:
                bytes = _context3.sent;
                _context3.next = 23;
                break;

              case 19:
                _context3.prev = 19;
                _context3.t0 = _context3["catch"](13);
                console.error(_context3.t0);
                throw new Error("error decompressing block ".concat(_context3.t0.code, " at 0 (length ").concat(maxFetch, ") ").concat(_context3.t0));

              case 23:
                if (!metaChar) {
                  _context3.next = 36;
                  break;
                }

                // trim backward from the end
                lastNewline = -1;
                newlineByte = '\n'.charCodeAt(0);
                metaByte = metaChar.charCodeAt(0);
                i = 0;

              case 28:
                if (!(i < bytes.length)) {
                  _context3.next = 35;
                  break;
                }

                if (!(i === lastNewline + 1 && bytes[i] !== metaByte)) {
                  _context3.next = 31;
                  break;
                }

                return _context3.abrupt("break", 35);

              case 31:
                if (bytes[i] === newlineByte) lastNewline = i;

              case 32:
                i += 1;
                _context3.next = 28;
                break;

              case 35:
                bytes = bytes.slice(0, lastNewline + 1);

              case 36:
                return _context3.abrupt("return", bytes);

              case 37:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[13, 19]]);
      }));

      function getHeaderBuffer() {
        return _getHeaderBuffer.apply(this, arguments);
      }

      return getHeaderBuffer;
    }()
    /**
     * get a string containing the "header" region of the
     * file, is the portion up to the first non-meta line
     *
     * @returns {Promise} for a string
     */

  }, {
    key: "getHeader",
    value: function () {
      var _getHeader = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
        var opts,
            bytes,
            _args4 = arguments;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                opts = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
                _context4.next = 3;
                return this.getHeaderBuffer(opts);

              case 3:
                bytes = _context4.sent;
                (0, _util.checkAbortSignal)(opts.signal);
                return _context4.abrupt("return", bytes.toString('utf8'));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getHeader() {
        return _getHeader.apply(this, arguments);
      }

      return getHeader;
    }()
    /**
     * get an array of reference sequence names, in the order in which
     * they occur in the file.
     *
     * reference sequence renaming is not applied to these names.
     *
     * @returns {Promise} for an array of string sequence names
     */

  }, {
    key: "getReferenceSequenceNames",
    value: function () {
      var _getReferenceSequenceNames = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
        var opts,
            metadata,
            _args5 = arguments;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                opts = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
                _context5.next = 3;
                return this.getMetadata(opts);

              case 3:
                metadata = _context5.sent;
                return _context5.abrupt("return", metadata.refIdToName);

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getReferenceSequenceNames() {
        return _getReferenceSequenceNames.apply(this, arguments);
      }

      return getReferenceSequenceNames;
    }()
    /**
     * @param {object} metadata metadata object from the parsed index,
     * containing columnNumbers, metaChar, and format
     * @param {string} regionRefName
     * @param {number} regionStart region start coordinate (0-based-half-open)
     * @param {number} regionEnd region end coordinate (0-based-half-open)
     * @param {array[string]} line
     * @returns {object} like `{startCoordinate, overlaps}`. overlaps is boolean,
     * true if line is a data line that overlaps the given region
     */

  }, {
    key: "checkLine",
    value: function checkLine(_ref2, regionRefName, regionStart, regionEnd, line) {
      var columnNumbers = _ref2.columnNumbers,
          metaChar = _ref2.metaChar,
          coordinateType = _ref2.coordinateType,
          format = _ref2.format;

      // skip meta lines
      if (line.charAt(0) === metaChar) {
        return {
          overlaps: false
        };
      } // check ref/start/end using column metadata from index


      var ref = columnNumbers.ref,
          start = columnNumbers.start,
          end = columnNumbers.end;
      if (!ref) ref = 0;
      if (!start) start = 0;
      if (!end) end = 0;
      if (format === 'VCF') end = 8;
      var maxColumn = Math.max(ref, start, end); // this code is kind of complex, but it is fairly fast.
      // basically, we want to avoid doing a split, because if the lines are really long
      // that could lead to us allocating a bunch of extra memory, which is slow

      var currentColumnNumber = 1; // cols are numbered starting at 1 in the index metadata

      var currentColumnStart = 0;
      var refSeq = '';
      var startCoordinate = -Infinity;

      for (var i = 0; i < line.length + 1; i += 1) {
        if (line[i] === '\t' || i === line.length) {
          if (currentColumnNumber === ref) {
            if (this.renameRefSeq(line.slice(currentColumnStart, i)) !== regionRefName) {
              return {
                overlaps: false
              };
            }
          } else if (currentColumnNumber === start) {
            startCoordinate = (0, _parseInt2.default)(line.slice(currentColumnStart, i), 10); // we convert to 0-based-half-open

            if (coordinateType === '1-based-closed') {
              startCoordinate -= 1;
            }

            if (startCoordinate >= regionEnd) {
              return {
                startCoordinate: startCoordinate,
                overlaps: false
              };
            }

            if (end === 0 || end === start) {
              // if we have no end, we assume the feature is 1 bp long
              if (startCoordinate + 1 <= regionStart) {
                return {
                  startCoordinate: startCoordinate,
                  overlaps: false
                };
              }
            }
          } else if (format === 'VCF' && currentColumnNumber === 4) {
            refSeq = line.slice(currentColumnStart, i);
          } else if (currentColumnNumber === end) {
            var endCoordinate = void 0; // this will never match if there is no end column

            if (format === 'VCF') {
              endCoordinate = this._getVcfEnd(startCoordinate, refSeq, line.slice(currentColumnStart, i));
            } else {
              endCoordinate = (0, _parseInt2.default)(line.slice(currentColumnStart, i), 10);
            }

            if (endCoordinate <= regionStart) {
              return {
                overlaps: false
              };
            }
          }

          currentColumnStart = i + 1;
          currentColumnNumber += 1;

          if (currentColumnNumber > maxColumn) {
            break;
          }
        }
      }

      return {
        startCoordinate: startCoordinate,
        overlaps: true
      };
    }
  }, {
    key: "_getVcfEnd",
    value: function _getVcfEnd(startCoordinate, refSeq, info) {
      var endCoordinate = startCoordinate + refSeq.length; // ignore TRA features as they specify CHR2 and END
      // as being on a different chromosome
      // if CHR2 is on the same chromosome, still ignore it
      // because there should be another pairwise feature
      // at the end of this one

      var isTRA = info.indexOf('SVTYPE=TRA') !== -1;

      if (info[0] !== '.' && !isTRA) {
        var prevChar = ';';

        for (var j = 0; j < info.length; j += 1) {
          if (prevChar === ';' && info.slice(j, j + 4) === 'END=') {
            var valueEnd = info.indexOf(';', j);
            if (valueEnd === -1) valueEnd = info.length;
            endCoordinate = (0, _parseInt2.default)(info.slice(j + 4, valueEnd), 10);
            break;
          }

          prevChar = info[j];
        }
      } else if (isTRA) {
        return startCoordinate + 1;
      }

      return endCoordinate;
    }
    /**
     * return the approximate number of data lines in the given reference sequence
     * @param {string} refSeq reference sequence name
     * @returns {Promise} for number of data lines present on that reference sequence
     */

  }, {
    key: "lineCount",
    value: function () {
      var _lineCount = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(refName) {
        var opts,
            _args6 = arguments;
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                opts = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
                return _context6.abrupt("return", this.index.lineCount(refName, opts));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function lineCount(_x5) {
        return _lineCount.apply(this, arguments);
      }

      return lineCount;
    }()
  }, {
    key: "_readRegion",
    value: function () {
      var _readRegion2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(position, compressedSize) {
        var opts,
            _yield$this$filehandl,
            bytesRead,
            buffer,
            _args7 = arguments;

        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                opts = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : {};
                _context7.next = 3;
                return this.filehandle.read(Buffer.alloc(compressedSize), 0, compressedSize, position, opts);

              case 3:
                _yield$this$filehandl = _context7.sent;
                bytesRead = _yield$this$filehandl.bytesRead;
                buffer = _yield$this$filehandl.buffer;
                return _context7.abrupt("return", bytesRead < compressedSize ? buffer.slice(0, bytesRead) : buffer);

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _readRegion(_x6, _x7) {
        return _readRegion2.apply(this, arguments);
      }

      return _readRegion;
    }()
    /**
     * read and uncompress the data in a chunk (composed of one or more
     * contiguous bgzip blocks) of the file
     * @param {Chunk} chunk
     * @returns {Promise} for a string chunk of the file
     */

  }, {
    key: "readChunk",
    value: function () {
      var _readChunk = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(chunk) {
        var opts,
            compressedData,
            _args8 = arguments;
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                opts = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
                _context8.next = 3;
                return this._readRegion(chunk.minv.blockPosition, chunk.fetchedSize(), opts);

              case 3:
                compressedData = _context8.sent;
                _context8.prev = 4;
                return _context8.abrupt("return", (0, _bgzfFilehandle.unzipChunkSlice)(compressedData, chunk));

              case 8:
                _context8.prev = 8;
                _context8.t0 = _context8["catch"](4);
                throw new Error("error decompressing chunk ".concat(chunk.toString(), " ").concat(_context8.t0));

              case 11:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[4, 8]]);
      }));

      function readChunk(_x8) {
        return _readChunk.apply(this, arguments);
      }

      return readChunk;
    }()
  }]);
  return TabixIndexedFile;
}();

exports.default = TabixIndexedFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,