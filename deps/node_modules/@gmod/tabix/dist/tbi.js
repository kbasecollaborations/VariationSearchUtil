"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _construct = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/reflect/construct"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _long = _interopRequireDefault(require("long"));

var _virtualOffset = _interopRequireWildcard(require("./virtualOffset"));

var _chunk = _interopRequireDefault(require("./chunk"));

var _bgzfFilehandle = require("@gmod/bgzf-filehandle");

var _util = require("./util");

var _indexFile = _interopRequireDefault(require("./indexFile"));

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = (0, _construct.default)(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_construct.default) return false; if (_construct.default.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call((0, _construct.default)(Date, [], function () {})); return true; } catch (e) { return false; } }

var TBI_MAGIC = 21578324; // TBI\1

var TAD_LIDX_SHIFT = 14;
/**
 * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)
 * @returns {Array[number]}
 */

function reg2bins(beg, end) {
  beg += 1; // < convert to 1-based closed

  end -= 1;
  var list = [0];

  for (var k = 1 + (beg >> 26); k <= 1 + (end >> 26); k += 1) {
    list.push(k);
  }

  for (var _k = 9 + (beg >> 23); _k <= 9 + (end >> 23); _k += 1) {
    list.push(_k);
  }

  for (var _k2 = 73 + (beg >> 20); _k2 <= 73 + (end >> 20); _k2 += 1) {
    list.push(_k2);
  }

  for (var _k3 = 585 + (beg >> 17); _k3 <= 585 + (end >> 17); _k3 += 1) {
    list.push(_k3);
  }

  for (var _k4 = 4681 + (beg >> 14); _k4 <= 4681 + (end >> 14); _k4 += 1) {
    list.push(_k4);
  }

  return list;
}

var TabixIndex = /*#__PURE__*/function (_IndexFile) {
  (0, _inherits2.default)(TabixIndex, _IndexFile);

  var _super = _createSuper(TabixIndex);

  function TabixIndex() {
    (0, _classCallCheck2.default)(this, TabixIndex);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(TabixIndex, [{
    key: "lineCount",
    value: function () {
      var _lineCount = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(refName) {
        var opts,
            indexData,
            refId,
            idx,
            stats,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                _context.next = 3;
                return this.parse(opts);

              case 3:
                indexData = _context.sent;

                if (indexData) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return", -1);

              case 6:
                refId = indexData.refNameToId[refName];
                idx = indexData.indices[refId];

                if (idx) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt("return", -1);

              case 10:
                stats = indexData.indices[refId].stats;

                if (!stats) {
                  _context.next = 13;
                  break;
                }

                return _context.abrupt("return", stats.lineCount);

              case 13:
                return _context.abrupt("return", -1);

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function lineCount(_x) {
        return _lineCount.apply(this, arguments);
      }

      return lineCount;
    }() // memoize
    // fetch and parse the index

  }, {
    key: "_parse",
    value: function () {
      var _parse2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _this = this;

        var opts,
            bytes,
            refCount,
            formatFlags,
            coordinateType,
            formatOpts,
            format,
            columnNumbers,
            metaValue,
            depth,
            maxBinNumber,
            maxRefLength,
            metaChar,
            skipLines,
            nameSectionLength,
            _this$_parseNameBytes,
            refNameToId,
            refIdToName,
            currOffset,
            firstDataLine,
            indices,
            _args2 = arguments;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opts = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                _context2.t0 = _bgzfFilehandle.unzip;
                _context2.next = 4;
                return this.filehandle.readFile(opts);

              case 4:
                _context2.t1 = _context2.sent;
                _context2.next = 7;
                return (0, _context2.t0)(_context2.t1);

              case 7:
                bytes = _context2.sent;
                (0, _util.checkAbortSignal)(opts.signal); // check TBI magic numbers

                if (!(bytes.readUInt32LE(0) !== TBI_MAGIC
                /* "TBI\1" */
                )) {
                  _context2.next = 11;
                  break;
                }

                throw new Error('Not a TBI file');

              case 11:
                // number of reference sequences in the index
                refCount = bytes.readInt32LE(4);
                formatFlags = bytes.readInt32LE(8);
                coordinateType = formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed';
                formatOpts = {
                  0: 'generic',
                  1: 'SAM',
                  2: 'VCF'
                };
                format = formatOpts[formatFlags & 0xf];

                if (format) {
                  _context2.next = 18;
                  break;
                }

                throw new Error("invalid Tabix preset format flags ".concat(formatFlags));

              case 18:
                columnNumbers = {
                  ref: bytes.readInt32LE(12),
                  start: bytes.readInt32LE(16),
                  end: bytes.readInt32LE(20)
                };
                metaValue = bytes.readInt32LE(24);
                depth = 5;
                maxBinNumber = ((1 << (depth + 1) * 3) - 1) / 7;
                maxRefLength = Math.pow(2, 14 + depth * 3);
                metaChar = metaValue ? String.fromCharCode(metaValue) : null;
                skipLines = bytes.readInt32LE(28); // read sequence dictionary

                nameSectionLength = bytes.readInt32LE(32);
                _this$_parseNameBytes = this._parseNameBytes(bytes.slice(36, 36 + nameSectionLength)), refNameToId = _this$_parseNameBytes.refNameToId, refIdToName = _this$_parseNameBytes.refIdToName; // read the indexes for each reference sequence

                currOffset = 36 + nameSectionLength;
                indices = new Array(refCount).fill(0).map(function () {
                  // the binning index
                  var binCount = bytes.readInt32LE(currOffset);
                  currOffset += 4;
                  var binIndex = {};
                  var stats;

                  for (var j = 0; j < binCount; j += 1) {
                    var bin = bytes.readUInt32LE(currOffset);
                    currOffset += 4;

                    if (bin > maxBinNumber + 1) {
                      throw new Error('tabix index contains too many bins, please use a CSI index');
                    } else if (bin === maxBinNumber + 1) {
                      var chunkCount = bytes.readInt32LE(currOffset);
                      currOffset += 4;

                      if (chunkCount === 2) {
                        stats = _this.parsePseudoBin(bytes, currOffset);
                      }

                      currOffset += 16 * chunkCount;
                    } else {
                      var _chunkCount = bytes.readInt32LE(currOffset);

                      currOffset += 4;
                      var chunks = new Array(_chunkCount);

                      for (var k = 0; k < _chunkCount; k += 1) {
                        var u = (0, _virtualOffset.fromBytes)(bytes, currOffset);
                        var v = (0, _virtualOffset.fromBytes)(bytes, currOffset + 8);
                        currOffset += 16;
                        firstDataLine = _this._findFirstData(firstDataLine, u);
                        chunks[k] = new _chunk.default(u, v, bin);
                      }

                      binIndex[bin] = chunks;
                    }
                  } // the linear index


                  var linearCount = bytes.readInt32LE(currOffset);
                  currOffset += 4;
                  var linearIndex = new Array(linearCount);

                  for (var _k5 = 0; _k5 < linearCount; _k5 += 1) {
                    linearIndex[_k5] = (0, _virtualOffset.fromBytes)(bytes, currOffset);
                    currOffset += 8;
                    firstDataLine = _this._findFirstData(firstDataLine, linearIndex[_k5]);
                  }

                  return {
                    binIndex: binIndex,
                    linearIndex: linearIndex,
                    stats: stats
                  };
                });
                return _context2.abrupt("return", {
                  indices: indices,
                  metaChar: metaChar,
                  maxBinNumber: maxBinNumber,
                  maxRefLength: maxRefLength,
                  skipLines: skipLines,
                  firstDataLine: firstDataLine,
                  columnNumbers: columnNumbers,
                  coordinateType: coordinateType,
                  format: format,
                  refIdToName: refIdToName,
                  refNameToId: refNameToId,
                  maxBlockSize: 1 << 16
                });

              case 30:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _parse() {
        return _parse2.apply(this, arguments);
      }

      return _parse;
    }()
  }, {
    key: "parsePseudoBin",
    value: function parsePseudoBin(bytes, offset) {
      var lineCount = (0, _util.longToNumber)(_long.default.fromBytesLE(bytes.slice(offset + 16, offset + 24), true));
      return {
        lineCount: lineCount
      };
    }
  }, {
    key: "_parseNameBytes",
    value: function _parseNameBytes(namesBytes) {
      var currRefId = 0;
      var currNameStart = 0;
      var refIdToName = [];
      var refNameToId = {};

      for (var i = 0; i < namesBytes.length; i += 1) {
        if (!namesBytes[i]) {
          if (currNameStart < i) {
            var refName = namesBytes.toString('utf8', currNameStart, i);
            refName = this.renameRefSeq(refName);
            refIdToName[currRefId] = refName;
            refNameToId[refName] = currRefId;
          }

          currNameStart = i + 1;
          currRefId += 1;
        }
      }

      return {
        refNameToId: refNameToId,
        refIdToName: refIdToName
      };
    }
  }, {
    key: "blocksForRange",
    value: function () {
      var _blocksForRange = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(refName, beg, end) {
        var opts,
            indexData,
            refId,
            indexes,
            linearIndex,
            binIndex,
            bins,
            minOffset,
            l,
            numOffsets,
            i,
            off,
            _i,
            chunks,
            j,
            _i2,
            _i3,
            _i4,
            _args3 = arguments;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                opts = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};
                if (beg < 0) beg = 0;
                _context3.next = 4;
                return this.parse(opts);

              case 4:
                indexData = _context3.sent;

                if (indexData) {
                  _context3.next = 7;
                  break;
                }

                return _context3.abrupt("return", []);

              case 7:
                refId = indexData.refNameToId[refName];
                indexes = indexData.indices[refId];

                if (indexes) {
                  _context3.next = 11;
                  break;
                }

                return _context3.abrupt("return", []);

              case 11:
                linearIndex = indexes.linearIndex, binIndex = indexes.binIndex;
                bins = reg2bins(beg, end);
                minOffset = linearIndex.length ? linearIndex[beg >> TAD_LIDX_SHIFT >= linearIndex.length ? linearIndex.length - 1 : beg >> TAD_LIDX_SHIFT] : new _virtualOffset.default(0, 0);

                if (minOffset) {
                  _context3.next = 17;
                  break;
                }

                console.warn('querying outside of possible tabix range');
                return _context3.abrupt("return", []);

              case 17:
                numOffsets = 0;

                for (i = 0; i < bins.length; i += 1) {
                  if (binIndex[bins[i]]) numOffsets += binIndex[bins[i]].length;
                }

                if (!(numOffsets === 0)) {
                  _context3.next = 21;
                  break;
                }

                return _context3.abrupt("return", []);

              case 21:
                off = [];
                numOffsets = 0;

                for (_i = 0; _i < bins.length; _i += 1) {
                  chunks = binIndex[bins[_i]];
                  if (chunks) for (j = 0; j < chunks.length; j += 1) {
                    if (minOffset.compareTo(chunks[j].maxv) < 0) {
                      off[numOffsets] = new _chunk.default(chunks[j].minv, chunks[j].maxv, chunks[j].bin);
                      numOffsets += 1;
                    }
                  }
                }

                if (off.length) {
                  _context3.next = 26;
                  break;
                }

                return _context3.abrupt("return", []);

              case 26:
                off = off.sort(function (a, b) {
                  return a.compareTo(b);
                }); // resolve completely contained adjacent blocks

                l = 0;

                for (_i2 = 1; _i2 < numOffsets; _i2 += 1) {
                  if (off[l].maxv.compareTo(off[_i2].maxv) < 0) {
                    l += 1;
                    off[l].minv = off[_i2].minv;
                    off[l].maxv = off[_i2].maxv;
                  }
                }

                numOffsets = l + 1; // resolve overlaps between adjacent blocks; this may happen due to the merge in indexing

                for (_i3 = 1; _i3 < numOffsets; _i3 += 1) {
                  if (off[_i3 - 1].maxv.compareTo(off[_i3].minv) >= 0) {
                    off[_i3 - 1].maxv = off[_i3].minv;
                  }
                } // merge adjacent blocks


                l = 0;

                for (_i4 = 1; _i4 < numOffsets; _i4 += 1) {
                  if (off[l].maxv.blockPosition === off[_i4].minv.blockPosition) off[l].maxv = off[_i4].maxv;else {
                    l += 1;
                    off[l].minv = off[_i4].minv;
                    off[l].maxv = off[_i4].maxv;
                  }
                }

                numOffsets = l + 1;
                return _context3.abrupt("return", off.slice(0, numOffsets));

              case 35:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function blocksForRange(_x2, _x3, _x4) {
        return _blocksForRange.apply(this, arguments);
      }

      return blocksForRange;
    }()
  }]);
  return TabixIndex;
}(_indexFile.default);

exports.default = TabixIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,